// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: control.proto

package controlv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Control_DeviceList_FullMethodName            = "/control.Control/DeviceList"
	Control_DeviceInfo_FullMethodName            = "/control.Control/DeviceInfo"
	Control_DeviceStatus_FullMethodName          = "/control.Control/DeviceStatus"
	Control_DeviceFeatures_FullMethodName        = "/control.Control/DeviceFeatures"
	Control_DeviceInfoList_FullMethodName        = "/control.Control/DeviceInfoList"
	Control_DeviceStatusList_FullMethodName      = "/control.Control/DeviceStatusList"
	Control_DeviceFeaturesList_FullMethodName    = "/control.Control/DeviceFeaturesList"
	Control_SetDeviceFeatureState_FullMethodName = "/control.Control/SetDeviceFeatureState"
)

// ControlClient is the client API for Control service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlClient interface {
	DeviceList(ctx context.Context, in *DeviceListRequest, opts ...grpc.CallOption) (*DeviceListResponse, error)
	DeviceInfo(ctx context.Context, in *DeviceInfoRequest, opts ...grpc.CallOption) (*DeviceInfoResponse, error)
	DeviceStatus(ctx context.Context, in *DeviceStatusRequest, opts ...grpc.CallOption) (*DeviceStatusResponse, error)
	DeviceFeatures(ctx context.Context, in *DeviceFeaturesRequest, opts ...grpc.CallOption) (*DeviceFeaturesResponse, error)
	DeviceInfoList(ctx context.Context, in *DeviceInfoListRequest, opts ...grpc.CallOption) (*DeviceInfoListResponse, error)
	DeviceStatusList(ctx context.Context, in *DeviceStatusListRequest, opts ...grpc.CallOption) (*DeviceStatusListResponse, error)
	DeviceFeaturesList(ctx context.Context, in *DeviceFeaturesListRequest, opts ...grpc.CallOption) (*DeviceFeaturesListResponse, error)
	SetDeviceFeatureState(ctx context.Context, in *SetDeviceFeatureStateRequest, opts ...grpc.CallOption) (*SetDeviceFeatureStateResponse, error)
}

type controlClient struct {
	cc grpc.ClientConnInterface
}

func NewControlClient(cc grpc.ClientConnInterface) ControlClient {
	return &controlClient{cc}
}

func (c *controlClient) DeviceList(ctx context.Context, in *DeviceListRequest, opts ...grpc.CallOption) (*DeviceListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceListResponse)
	err := c.cc.Invoke(ctx, Control_DeviceList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) DeviceInfo(ctx context.Context, in *DeviceInfoRequest, opts ...grpc.CallOption) (*DeviceInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceInfoResponse)
	err := c.cc.Invoke(ctx, Control_DeviceInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) DeviceStatus(ctx context.Context, in *DeviceStatusRequest, opts ...grpc.CallOption) (*DeviceStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceStatusResponse)
	err := c.cc.Invoke(ctx, Control_DeviceStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) DeviceFeatures(ctx context.Context, in *DeviceFeaturesRequest, opts ...grpc.CallOption) (*DeviceFeaturesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceFeaturesResponse)
	err := c.cc.Invoke(ctx, Control_DeviceFeatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) DeviceInfoList(ctx context.Context, in *DeviceInfoListRequest, opts ...grpc.CallOption) (*DeviceInfoListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceInfoListResponse)
	err := c.cc.Invoke(ctx, Control_DeviceInfoList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) DeviceStatusList(ctx context.Context, in *DeviceStatusListRequest, opts ...grpc.CallOption) (*DeviceStatusListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceStatusListResponse)
	err := c.cc.Invoke(ctx, Control_DeviceStatusList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) DeviceFeaturesList(ctx context.Context, in *DeviceFeaturesListRequest, opts ...grpc.CallOption) (*DeviceFeaturesListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceFeaturesListResponse)
	err := c.cc.Invoke(ctx, Control_DeviceFeaturesList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) SetDeviceFeatureState(ctx context.Context, in *SetDeviceFeatureStateRequest, opts ...grpc.CallOption) (*SetDeviceFeatureStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDeviceFeatureStateResponse)
	err := c.cc.Invoke(ctx, Control_SetDeviceFeatureState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlServer is the server API for Control service.
// All implementations must embed UnimplementedControlServer
// for forward compatibility.
type ControlServer interface {
	DeviceList(context.Context, *DeviceListRequest) (*DeviceListResponse, error)
	DeviceInfo(context.Context, *DeviceInfoRequest) (*DeviceInfoResponse, error)
	DeviceStatus(context.Context, *DeviceStatusRequest) (*DeviceStatusResponse, error)
	DeviceFeatures(context.Context, *DeviceFeaturesRequest) (*DeviceFeaturesResponse, error)
	DeviceInfoList(context.Context, *DeviceInfoListRequest) (*DeviceInfoListResponse, error)
	DeviceStatusList(context.Context, *DeviceStatusListRequest) (*DeviceStatusListResponse, error)
	DeviceFeaturesList(context.Context, *DeviceFeaturesListRequest) (*DeviceFeaturesListResponse, error)
	SetDeviceFeatureState(context.Context, *SetDeviceFeatureStateRequest) (*SetDeviceFeatureStateResponse, error)
	mustEmbedUnimplementedControlServer()
}

// UnimplementedControlServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedControlServer struct{}

func (UnimplementedControlServer) DeviceList(context.Context, *DeviceListRequest) (*DeviceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceList not implemented")
}
func (UnimplementedControlServer) DeviceInfo(context.Context, *DeviceInfoRequest) (*DeviceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfo not implemented")
}
func (UnimplementedControlServer) DeviceStatus(context.Context, *DeviceStatusRequest) (*DeviceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceStatus not implemented")
}
func (UnimplementedControlServer) DeviceFeatures(context.Context, *DeviceFeaturesRequest) (*DeviceFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceFeatures not implemented")
}
func (UnimplementedControlServer) DeviceInfoList(context.Context, *DeviceInfoListRequest) (*DeviceInfoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoList not implemented")
}
func (UnimplementedControlServer) DeviceStatusList(context.Context, *DeviceStatusListRequest) (*DeviceStatusListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceStatusList not implemented")
}
func (UnimplementedControlServer) DeviceFeaturesList(context.Context, *DeviceFeaturesListRequest) (*DeviceFeaturesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceFeaturesList not implemented")
}
func (UnimplementedControlServer) SetDeviceFeatureState(context.Context, *SetDeviceFeatureStateRequest) (*SetDeviceFeatureStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceFeatureState not implemented")
}
func (UnimplementedControlServer) mustEmbedUnimplementedControlServer() {}
func (UnimplementedControlServer) testEmbeddedByValue()                 {}

// UnsafeControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlServer will
// result in compilation errors.
type UnsafeControlServer interface {
	mustEmbedUnimplementedControlServer()
}

func RegisterControlServer(s grpc.ServiceRegistrar, srv ControlServer) {
	// If the following call pancis, it indicates UnimplementedControlServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Control_ServiceDesc, srv)
}

func _Control_DeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).DeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_DeviceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).DeviceList(ctx, req.(*DeviceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_DeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).DeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_DeviceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).DeviceInfo(ctx, req.(*DeviceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_DeviceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).DeviceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_DeviceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).DeviceStatus(ctx, req.(*DeviceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_DeviceFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).DeviceFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_DeviceFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).DeviceFeatures(ctx, req.(*DeviceFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_DeviceInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).DeviceInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_DeviceInfoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).DeviceInfoList(ctx, req.(*DeviceInfoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_DeviceStatusList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceStatusListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).DeviceStatusList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_DeviceStatusList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).DeviceStatusList(ctx, req.(*DeviceStatusListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_DeviceFeaturesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceFeaturesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).DeviceFeaturesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_DeviceFeaturesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).DeviceFeaturesList(ctx, req.(*DeviceFeaturesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_SetDeviceFeatureState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceFeatureStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).SetDeviceFeatureState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_SetDeviceFeatureState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).SetDeviceFeatureState(ctx, req.(*SetDeviceFeatureStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Control_ServiceDesc is the grpc.ServiceDesc for Control service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Control_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "control.Control",
	HandlerType: (*ControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeviceList",
			Handler:    _Control_DeviceList_Handler,
		},
		{
			MethodName: "DeviceInfo",
			Handler:    _Control_DeviceInfo_Handler,
		},
		{
			MethodName: "DeviceStatus",
			Handler:    _Control_DeviceStatus_Handler,
		},
		{
			MethodName: "DeviceFeatures",
			Handler:    _Control_DeviceFeatures_Handler,
		},
		{
			MethodName: "DeviceInfoList",
			Handler:    _Control_DeviceInfoList_Handler,
		},
		{
			MethodName: "DeviceStatusList",
			Handler:    _Control_DeviceStatusList_Handler,
		},
		{
			MethodName: "DeviceFeaturesList",
			Handler:    _Control_DeviceFeaturesList_Handler,
		},
		{
			MethodName: "SetDeviceFeatureState",
			Handler:    _Control_SetDeviceFeatureState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "control.proto",
}
