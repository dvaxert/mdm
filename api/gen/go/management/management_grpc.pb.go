// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: management.proto

package managementv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeviceManagement_DeviceRegister_FullMethodName = "/management.DeviceManagement/DeviceRegister"
	DeviceManagement_DevicePing_FullMethodName     = "/management.DeviceManagement/DevicePing"
	DeviceManagement_DeviceState_FullMethodName    = "/management.DeviceManagement/DeviceState"
)

// DeviceManagementClient is the client API for DeviceManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceManagementClient interface {
	DeviceRegister(ctx context.Context, in *DeviceRegisterRequest, opts ...grpc.CallOption) (*DeviceRegisterResponse, error)
	DevicePing(ctx context.Context, in *DevicePingRequest, opts ...grpc.CallOption) (*DevicePingResponse, error)
	DeviceState(ctx context.Context, in *DeviceStateRequest, opts ...grpc.CallOption) (*DeviceStateResponse, error)
}

type deviceManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceManagementClient(cc grpc.ClientConnInterface) DeviceManagementClient {
	return &deviceManagementClient{cc}
}

func (c *deviceManagementClient) DeviceRegister(ctx context.Context, in *DeviceRegisterRequest, opts ...grpc.CallOption) (*DeviceRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceRegisterResponse)
	err := c.cc.Invoke(ctx, DeviceManagement_DeviceRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) DevicePing(ctx context.Context, in *DevicePingRequest, opts ...grpc.CallOption) (*DevicePingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DevicePingResponse)
	err := c.cc.Invoke(ctx, DeviceManagement_DevicePing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagementClient) DeviceState(ctx context.Context, in *DeviceStateRequest, opts ...grpc.CallOption) (*DeviceStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceStateResponse)
	err := c.cc.Invoke(ctx, DeviceManagement_DeviceState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceManagementServer is the server API for DeviceManagement service.
// All implementations must embed UnimplementedDeviceManagementServer
// for forward compatibility.
type DeviceManagementServer interface {
	DeviceRegister(context.Context, *DeviceRegisterRequest) (*DeviceRegisterResponse, error)
	DevicePing(context.Context, *DevicePingRequest) (*DevicePingResponse, error)
	DeviceState(context.Context, *DeviceStateRequest) (*DeviceStateResponse, error)
	mustEmbedUnimplementedDeviceManagementServer()
}

// UnimplementedDeviceManagementServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeviceManagementServer struct{}

func (UnimplementedDeviceManagementServer) DeviceRegister(context.Context, *DeviceRegisterRequest) (*DeviceRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceRegister not implemented")
}
func (UnimplementedDeviceManagementServer) DevicePing(context.Context, *DevicePingRequest) (*DevicePingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevicePing not implemented")
}
func (UnimplementedDeviceManagementServer) DeviceState(context.Context, *DeviceStateRequest) (*DeviceStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceState not implemented")
}
func (UnimplementedDeviceManagementServer) mustEmbedUnimplementedDeviceManagementServer() {}
func (UnimplementedDeviceManagementServer) testEmbeddedByValue()                          {}

// UnsafeDeviceManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceManagementServer will
// result in compilation errors.
type UnsafeDeviceManagementServer interface {
	mustEmbedUnimplementedDeviceManagementServer()
}

func RegisterDeviceManagementServer(s grpc.ServiceRegistrar, srv DeviceManagementServer) {
	// If the following call pancis, it indicates UnimplementedDeviceManagementServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeviceManagement_ServiceDesc, srv)
}

func _DeviceManagement_DeviceRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).DeviceRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManagement_DeviceRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).DeviceRegister(ctx, req.(*DeviceRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_DevicePing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DevicePingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).DevicePing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManagement_DevicePing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).DevicePing(ctx, req.(*DevicePingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagement_DeviceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagementServer).DeviceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManagement_DeviceState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagementServer).DeviceState(ctx, req.(*DeviceStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceManagement_ServiceDesc is the grpc.ServiceDesc for DeviceManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management.DeviceManagement",
	HandlerType: (*DeviceManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeviceRegister",
			Handler:    _DeviceManagement_DeviceRegister_Handler,
		},
		{
			MethodName: "DevicePing",
			Handler:    _DeviceManagement_DevicePing_Handler,
		},
		{
			MethodName: "DeviceState",
			Handler:    _DeviceManagement_DeviceState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management.proto",
}
